//若数据宽度超过指定值，则按实际宽度输出 如果实际数据宽度小于指定值，默认在左侧填充空格

int num = 42;

// 基本宽度控制
printf("'%5d'\n", num);   // 输出: '   42'（宽度5，右对齐）
printf("'%-5d'\n", num);  // 输出: '42   '（左对齐）

// 动态宽度
int width = 8;
printf("'%*d'\n", width, num);  // 输出: '      42'（宽度8）

// 浮点数宽度
double pi = 3.14159;
printf("%8.3f\n", pi);  // 输出: '   3.142'（总宽度8，小数点后3位）

//再 scanf中 
scanf("%Ns", str);  // 最多读取N个字符（不包括结尾的'\0'）
scanf("%Nc", &ch);  // 读取N个字符（包括空格、换行符）

char str[10];
int num;

scanf("%9s", str);  // 避免溢出 安全读取字符串（最多9个字符 + 自动添加'\0'）

scanf("%3d", &num); // num = 123，剩余字符留在缓冲区 读取固定宽度的数字（如输入"12345"，只读取前3位）
