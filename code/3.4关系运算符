/**
 *默认情况下，我们在程序中写的每一句正确代码都会被执行。但很多时候，我们想在某个条件成立的情况下才执行某一段代码。
 *这种情况的话可以使用条件语句来完成，但是学习条件语句之前，我们先来看一些更基础的知识：如何判断一个条件是否成立。
 *C语言中的真假性
 *在C语言中，条件成立称为“真”，条件不成立称为“假”，因此，判断条件是否成立，就是判断条件的“真假”。
 *怎么判断真假呢？C语言规定，任何数值都有真假性，任何非0值都为“真”，只有0才为“假”。也就是说，108、-18、4.5、-10.5等都是“真”，0则是“假”。
 */
 //简单的判断
#include <stdio.h>
int main(){
    int result = 10 > 5;
    printf("result = %i\n", result); // 1
    result = 5 < 10;
    printf("result = %i\n", result); // 1
    result = 5 > 10;
    printf("result = %i\n", result); // 0
    result = 10 >= 10;
    printf("result = %i\n", result); // 1
    result = 10 <= 10;
    printf("result = %i\n", result); // 1
    result = 10 == 10;
    printf("result = %i\n", result); // 1
    result = 10 != 9;
    printf("result = %i\n", result); // 1
}

// 优先级和结合性
#include <stdio.h>
int main(){
    // == 优先级 小于 >，所以先计算>
    // result = 10 == 1; result = 0;
    int result = 10 == 5 > 3;
    printf("result = %i\n", result); // 0
}

#include <stdio.h>
int main(){
    // == 和 != 优先级一样，所以按照结合性
    // 关系运算符是左结合性，所以从左至右计算
    // result = 0 != 3; result = 1;
    int result = 10 == 5 != 3;
    printf("result = %i\n", result); // 1
}

//练习
//int result1 = 3 > 4 + 7;
//int result2 = (3 > 4) + 7;
//int result3 = 5 != 4 + 2 * 7 > 3 == 10;

#include <stdio.h>

int main()
{
    int result1 = 3 > 4 + 7;
    int result2 = (3 > 4) + 7;
    int result3 = 5 != 4 + 2 * 7 > 3 == 10;

    printf("result1 = %i\n", result1); // 表达式 3 > 4 + 7 中，先计算 4 + 7 得到 11，然后比较 3 > 11，结果为假（0） 因此，result1 的值为 0
    printf("result2 = %i\n", result2); // 表达式 (3 > 4) + 7 中，先计算括号内的 3 > 4，结果为假（0），然后 0 + 7 得到 7
    printf("result3 = %i\n", result3); // 表达式 5 != 4 + 2 * 7 > 3 == 10 较为复杂，需要按照运算符优先级和结合性来分析
		/**
		 *首先计算乘法 2 * 7 得到 14，然后 4 + 14 得到 18。
     *接下来比较 5 != 18，结果为真（1）
     *然后比较 1 > 3，结果为假（0）
     *最后比较 0 == 10，结果为假（0） 
     *因此，result3 的值为 0
		 */
    return 0;
}

//无论是float还是double都有精度问题，所以一定要避免利用==判断浮点数是否相等
#include <stdio.h>
int main(){
    float a = 0.1;
    float b = a * 10 + 0.0000000001;
    double c = 1.0 + 0.0000000001;
    printf("b = %f\n", b);
    printf("c = %f\n", c);
    int result = b == c;
    printf("result = %i\n", result); // 0
}
