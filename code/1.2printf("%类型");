//关于printf("%类型"); %号后面可用的种类

// %d 和 %i 同为十进制数整型与 int 搭配
int a = 10;
printf("a = %d", a);
printf("a = %i", a);

// %u 无符号十进制整型 不可输出带符号的负数
int a = 10;
int b = -10;
printf("a = %u", a); //可行
//printf("b = %u", b); 无法输出-10

// %o 无符号8进制整型 不可输出带符号的负数
int a = 10;
int b = -10;
printf("a = %o", a); //可行 10 的 8 进制为 12
//printf("b = %o", b); 无法输出 -12

// %x 和 %X 都用于以十六进制形式输出整数，但它们在字母字符的大小写上有所不同
int num = 255;
printf("十六进制（小写）: %x\n", num); 
//变量 num 的值为 255，其十六进制表示为 ff。运行程序后，输出结果为：十六进制（小写）: ff

int num = 255;
printf("十六进制（大写）: %X\n", num);
//变量 num 的值为 255，十六进制表示为 FF（大写形式）。程序运行后的输出结果为：十六进制（大写）: FF

// %f是一种格式说明符，专门用于输出浮点数（float）、双精度浮点数（double）等浮点类型的数据
float f = 3.1415926f;
double d = 2.718281828;
printf("浮点数 f: %f\n", f);
//输出结果：浮点数 f: 3.141593
printf("双精度浮点数 d: %f\n", d);
//输出结果：双精度浮点数 d: 2.718282

// %e和%E都是用于以科学计数法形式输出浮点数的格式说明符，它们在表现形式不同
//%e格式说明符以小写的e来表示科学计数法中的指数部分。其一般形式为[-]m.ddddd e±xx
/**
 *-：可选的负号，表示数值为负。
 *m：尾数的整数部分，通常为1位非零数字。
 *ddddd：尾数的小数部分，默认情况下会输出6位小数。
 *e：指数标识符，小写形式。
 *±xx：指数部分，为两位数字，前面可以有正负号。
 */
 
// %e
double num = 1234.56789;
printf("使用%e输出: %e\n", num);使用%e输出: 1.234568e+03 //小数部位只能保留6位，+03，表示10³
 

// %E
double num = 1234.56789;
printf("使用%E输出: %E\n", num);//使用%E输出: 1.234568E+03 //小数部位只能保留6位，+03，表示10³






